(lambda (priv pub) (
        letrec (
               ;; validate-inclusion-proof validates that the provided
               ;; output commitment connects to the provided merkle root
               ;; via a merkle inclusion proof.
               (validate-inclusion-proof (lambda (leaf hashes root)
                   (letrec (
                       (hash-branches (lambda (h hashes)
                           (let ((next-hash (car hashes))
                                (val (car next-hash))
                                (new-h (if (cdr next-hash)
                                      (eval (cons 'coproc_blake2s (cons h (cons val nil))))
                                      (eval (cons 'coproc_blake2s (cons val (cons h nil)))))))

                              (if (cdr hashes)
                                  (hash-branches new-h (cdr hashes))
                                  new-h)))))

                       (if hashes
                           (= (hash-branches leaf hashes) root) ;; All others
                           (= leaf root)                        ;; Genesis coinbase
                       ))))
               )

               ;; Validate the staked input
               (let  (
                      (locked-until (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr pub))))))))))
                      (locking-params (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr priv)))))))))
                      (unlocking-params (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr priv))))))))))
                      (script (car (cdr (cdr (cdr (cdr (cdr (cdr priv))))))))
                      (script-commitment (num (commit script)))
                      (script-hash (num (commit (cons script-commitment locking-params))))
                      (amount (car priv))
                      (asset-id (car (cdr priv)))
                      (salt (car (cdr (cdr priv))))
                      (state (car (cdr (cdr (cdr priv)))))
                      (output-commitment (num (commit (cons script-hash (cons amount (cons asset-id (cons salt (cons state nil))))))))
                      (commitment-index (car (cdr (cdr (cdr (cdr priv))))))
                      (leaf (eval (cons 'coproc_blake2s (cons commitment-index (cons output-commitment nil)))))
                      (hashes (car (cdr (cdr (cdr (cdr (cdr priv)))))))
                      (nullifier (num (commit (cons commitment-index (cons salt (cons script-commitment (cons locking-params nil)))))))
                     )

                     ;; Make sure the public amount matches the private amount
                     (if (= amount (car pub))
                         ;; Only ILX can be staked
                         (if (= asset-id 0)
                             ;; Make sure the calculated nullifier matches the public nullifier
                             (if (= nullifier (car (car (cdr (cdr pub)))))
                                 ;; Validate the inclusion proof proving the input commitment exists in the txo-set.
                                 (if (validate-inclusion-proof leaf hashes (car (cdr (cdr (cdr pub)))))
                                     ;; Validate the user's locking script
                                     (if (script locking-params unlocking-params 0 (cons (cons priv nil) nil) (cdr pub))
                                         ;; If locked-until is greater than zero the script must be the
                                         ;; timelocked-multisig script.
                                         (if (> locked-until 0)
                                             (if (= script-commitment 0x01d0043f8665c23998963a429c36a882f16f64c59e376f065fb13cca65ae5cc5)
                                                 ;; Validate that the script's lock-until matches the transaction's
                                                 (= (car locking-params) locked-until)
                                                 nil
                                             )
                                             t ;; Locked-until is zero. No further validation is needed.
                                         )
                                         nil ;; Locking script validation failed. Return false.
                                     )
                                     nil ;; Invalid inclusion proof. Return false.
                                 )
                                 nil ;; Nullifier invalid. Return false.
                             )
                             nil ;; Asset other than ILX is staked
                        )
                        nil ;; The public amount does not match the private amount
                    )
               )
        )
)