(lambda (priv pub) (
        letrec (
               ;; map-get returns an item from a map given the key.
               ;; the map must be a list of form (:key item :key item).
               (map-get (lambda (key plist)
                    (if plist
                       (if (eq key (car plist))
                           (car (cdr plist))
                           (map-get key (cdr (cdr plist))))
                       nil)))

               ;; map-update updates value of the given key in the
               ;; provided map and returns the new map.
               ;; If the key is not in the map a new map entry will
               ;; be added.
               ;; The map is formatted as a flat list of format
               ;; (:key item :key item)
               (map-update (lambda (key value map)
                    (if (eq map nil)
                        (cons key (cons value nil))
                        (let ((existing-key (car map))
                              (rest-map (cdr map)))
                              (if (= existing-key key)
                                  (cons key (cons value (cdr (cdr map))))
                                  (cons existing-key (map-update key value rest-map)))))))

               ;; check-overflow returns whether the sum of a and b overflows a u64
               (check-overflow (lambda (a b)
                   (if (> b 0)
                       (if (> a (- 18446744073709551615 b))
                           t
                           nil)
                       nil)))

               ;; validate-inclusion-proof validates that the provided
               ;; output commitment connects to the provided merkle root
               ;; via a merkle inclusion proof.
               (validate-inclusion-proof (lambda (leaf hashes root)
                   (letrec (
                       (hash-branches (lambda (h hashes)
                           (let ((next-hash (car hashes))
                                (val (car next-hash))
                                (new-h (if (cdr next-hash)
                                      (eval (cons 'coproc_blake2s (cons h (cons val nil))))
                                      (eval (cons 'coproc_blake2s (cons val (cons h nil)))))))

                              (if (cdr hashes)
                                  (hash-branches new-h (cdr hashes))
                                  new-h)))))

                       (if hashes
                           (= (hash-branches leaf hashes) root) ;; All others
                           (= leaf root)                        ;; Genesis coinbase
                       ))))

               ;; validate-output validates that the provided private output
               ;; data matches the public output commitment found in the
               ;; transaction.
               (validate-outputs (lambda (private-outputs public-outputs asset-map)
                    (let ((priv-out (car private-outputs))
                          (pub-out (car public-outputs))
                          (amount (car (cdr priv-out)))
                          (asset-id (car (cdr (cdr priv-out))))
                          (asset-sum (map-get asset-id asset-map))
                          (asset-sum (if asset-sum asset-sum 0))
                         )
                         (if pub-out
                             (if priv-out ;; If priv and pub are both non-nil then we need to validate the public commitment
                                 (if (< amount 0)
                                     nil ;; If amount is negative return false
                                     (if (check-overflow asset-sum amount)
                                         nil ;; If overflow return false
                                         (if (= (car pub-out) (num (commit (cons (car priv-out)                                 ;; script-hash
                                                                       (cons amount                                             ;; amount
                                                                       (cons asset-id                                           ;; asset-id
                                                                       (cons (car (cdr (cdr (cdr priv-out))))                   ;; salt
                                                                       (cons (car (cdr (cdr (cdr (cdr priv-out))))) nil)))))))) ;; state
                                             (validate-outputs (cdr private-outputs) (cdr public-outputs) (map-update asset-id (+ asset-sum amount) asset-map)) ;; If validation succeeds loop through the next ouputs
                                             nil ;; Validation failed return false
                                         )
                                     )
                                 )
                                 nil ;; Length of priv and pub outputs don't match. Return false.
                             )
                             (if priv-out
                                 nil ;; Length of priv and pub outputs don't match. Return false.
                                 asset-map ;; Both priv and pub are nil, this means we hit the end of the loop without error. Return true.
                             )
                         )
                    )
               ))

               ;; validate-inputs loops through the private inputs and for each
               ;; validates that the nullifer is valid, the commitment links to
               ;; to the txo-root via the merkle proof, and executes the user's
               ;; script with the provided unlocking params.
               (validate-inputs (lambda (inputs idx txo-root asset-map nullifiers)
                     (if (car inputs)
                         (let (
                               (input (car inputs))
                               (locking-params (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr input)))))))))
                               (unlocking-params (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr input))))))))))
                               (script (car (cdr (cdr (cdr (cdr (cdr (cdr input))))))))
                               (script-commitment (num (commit script)))
                               (script-hash (num (commit (cons script-commitment locking-params))))
                               (amount (car  input))
                               (asset-id (car (cdr input)))
                               (salt (car (cdr (cdr input))))
                               (state (car (cdr (cdr (cdr input)))))
                               (output-commitment (num (commit (cons script-hash (cons amount (cons asset-id (cons salt (cons state nil))))))))
                               (asset-sum (map-get asset-id asset-map))
                               (asset-sum (if asset-sum asset-sum 0))
                               (commitment-index (car (cdr (cdr (cdr (cdr input))))))
                               (leaf (eval (cons 'coproc_blake2s (cons commitment-index (cons output-commitment nil)))))
                               (hashes (car (cdr (cdr (cdr (cdr (cdr input)))))))
                               (nullifier (num (commit (cons commitment-index (cons salt (cons script-commitment (cons locking-params nil)))))))
                              )

                              ;; Make sure input amounts don't overflow. This isn't possible with
                              ;; illium coins as there will never be more than 2^60, but assets can
                              ;; potentially mint more.
                              (if (check-overflow asset-sum amount)
                                  nil
                                  ;; Make sure the calculated nullifier matches the public nullifier
                                  (if (= nullifier (car nullifiers))
                                      ;; Validate the inclusion proof proving the input commitment exists in the txo-set.
                                      (if (validate-inclusion-proof leaf hashes txo-root)
                                          ;; Validate the user's locking script
                                          (if (script locking-params unlocking-params idx priv pub)
                                              (validate-inputs (cdr inputs) (+ idx 1) txo-root (map-update asset-id (+ asset-sum amount) asset-map) (cdr nullifiers)) ;; Validation passed. Continue to the next input.
                                              nil ;; Locking script validation failed. Return false.
                                          )
                                          nil ;; Invalid inclusion proof. Return false.
                                      )
                                      nil ;; Nullifier invalid. Return false.
                                  )
                              )
                         )
                         (if nullifiers
                             nil        ;; We have more public nullfiers than private inputs. Return false.
                             asset-map) ;; We've reached the end of the input list without error. Return true.
                     )
               ))

               ;; validate-amounts makes sure the output amounts do not exceed the input
               ;; amounts, taking into consideration fees and any coinbase or mint.
               (validate-amounts (lambda (in-map out-map fee mint-id mint-amount)
                     (let (
                            (out-asset (car out-map))
                            (out-amount (car (cdr out-map)))
                            (in-amount (map-get out-asset in-map))
                            (in-amount (if in-amount in-amount 0))
                          )

                         (if out-asset
                             (if (= out-asset 0)
                                 (if (check-overflow out-amount fee)
                                     nil ;; Overflow. Return false.
                                     (if (> (+ out-amount fee) in-amount)
                                         nil ;; Input amount + coinbase exceeds output amount + fee. Return nil.
                                         (validate-amounts in-map (cdr (cdr out-map)) fee mint-id mint-amount)
                                     )
                                 )
                                 (if mint-id
                                     (if (= out-asset mint-id)
                                         (if (check-overflow in-amount mint-amount)
                                             nil ;; Overflow. Return false.
                                             (if (> out-amount (+ in-amount mint-amount))
                                                  nil ;; Input amount + mint exceeds output amount. Return nil.
                                                  (validate-amounts in-map (cdr (cdr out-map)) fee mint-id mint-amount)
                                             )
                                         )
                                         (if (> out-amount in-amount)
                                             nil ;; Input amount exceeds output amount. Return nil.
                                             (validate-amounts in-map (cdr (cdr out-map)) fee mint-id mint-amount)
                                         )
                                     )
                                     (if (> out-amount in-amount)
                                         nil ;; Input amount exceeds output amount. Return nil.
                                         (validate-amounts in-map (cdr (cdr out-map)) fee mint-id mint-amount)
                                     )
                                 )
                             )
                             t ;; We've looped through all the output assets without error. Return true.
                         )
                    )
               ))

               )

              ;; Validate the inputs, outputs, and amounts
              (let (
                     (input-amounts (validate-inputs (car priv) 0 (car (cdr (cdr pub))) (cons 0 (cons 0 nil)) (car (cdr pub))))
                     (output-amounts (validate-outputs (cdr priv) (car (cdr (cdr (cdr (cdr (cdr (cdr pub))))))) (cons 0 (cons 0 nil))))
                   )
                   (if input-amounts
                       (if output-amounts
                           (validate-amounts input-amounts output-amounts (car (cdr (cdr (cdr pub)))) (car (cdr (cdr (cdr (cdr pub))))) (car (cdr (cdr (cdr (cdr (cdr pub)))))))
                           nil
                       )
                       nil
                   )
              )
        )
)